package com.viaplay.historicalamendment;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerateStrategy;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.amazonaws.services.dynamodbv2.document.*;
import com.amazonaws.services.dynamodbv2.document.spec.GetItemSpec;
import com.amazonaws.services.dynamodbv2.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.CompletableFuture;

@Component
public class UpmWatchedRecordProcessor implements RecordProcessor {


    private Table upmWatchedTable = null;

    @Autowired
    private DynamoDB dynamoDB;

    private Date createdDate;

    @Autowired
    private ApplicationConfig config;


    @PostConstruct
    public void preLoadDataBases() {
        upmWatchedTable = dynamoDB.getTable(config.getUserProgramMarksWatched());
    }


    private AttributeValue now() {
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        AttributeValue value = new AttributeValue();
        value.setN(String.valueOf(timestamp.getTime()));
        return value;
    }

    @DynamoDBAutoGeneratedTimestamp(strategy= DynamoDBAutoGenerateStrategy.CREATE)
    public Date getCreatedDate() { return createdDate; }


    private boolean shouldUpdateRecordForUPM(String hashkey,  String rawProgramGuid) {
        Item upmRecordExists = null;
        try{
            GetItemSpec itemSpec = new GetItemSpec()
                    .withPrimaryKey(new PrimaryKey("userId", hashkey, "programGuid", rawProgramGuid));
             upmRecordExists = upmWatchedTable.getItem(itemSpec);
            if(upmRecordExists != null){
                System.out.println(upmRecordExists.toJSONPretty());
                System.out.println("XXXXXXXXX : " + upmRecordExists);
            }
        } catch(Exception ex){
            System.out.println(ex.getMessage());
        }

        return upmRecordExists !=null ? false:true;
    }


    @Override
    public <T> CompletableFuture<T> createUpdateQuery(String rawUserId, String profileId, String rawProgramGuid, String seriesGuid, boolean isKids) {


        return (CompletableFuture<T>) CompletableFuture.supplyAsync(() -> {

            System.out.println("from UPM watched  ");
            String hashKey = createHashKey(rawUserId, profileId, rawProgramGuid, isKids);
          if(!shouldUpdateRecordForUPM(hashKey, rawProgramGuid)){
                //to avoid duplicates
                  return null;
           }
            HashMap<String, AttributeValue> upmWatchedValues = new HashMap<>();
            upmWatchedValues.put("userId", new AttributeValue(hashKey));
            upmWatchedValues.put("programGuid", new AttributeValue(rawProgramGuid));
            upmWatchedValues.put("metadata", new AttributeValue("{}"));
            upmWatchedValues.put("ts", now());

            String primary = "userId";
            String secondary = "programGuid";

            return new Put()
                    .withTableName(config.getUserProgramMarksWatched())
                    .withItem(upmWatchedValues)
                    .withConditionExpression("attribute_not_exists(" + primary + ") and attribute_not_exists(" + secondary + ")");






        });


    }
}

